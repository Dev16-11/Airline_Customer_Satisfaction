# -*- coding: utf-8 -*-
"""Airline Customer Satisfaction .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1a0LzQQ5fVH57WpuunZVTHw9pu6BOfFG2
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

"""Load the Dataset"""

df=pd.read_csv("/content/ML Project - Decision Tree Airline Customer Satisfaction U16955468980.txt")

df

df.head()

df.tail()

df.sample(5)

df.info()

"""Data Columns"""

df.columns

"""Data Description"""

df.describe()

df.isnull().sum()

"""Dropping 'Unnamed: 0.1', 'Unnamed: 0' column"""

df=df.drop(['Unnamed: 0.1', 'Unnamed: 0'],axis=1)

df

df.columns=[each.replace(" ","_") for each in df.columns]

"""Replacing " " with "_" in columns"""

df.columns

"""Giving Label to satisfaction column"""

df["satisfaction"]

df["satisfaction"]=[1 if each=="satisfied" else 0 for each in df.satisfaction]

df["satisfaction"]

df["satisfaction"].value_counts()

df["satisfaction"].value_counts().plot(kind="bar")

df["Gender"].value_counts().plot(kind="bar")

"""Getting the mean value for gender and satisfaction column"""

df[["Gender","satisfaction"]].groupby(["Gender"],as_index=False).mean().sort_values(by="satisfaction",ascending=False)

"""Getting the mean value for age and satisfaction column"""

df[["Age","satisfaction"]].groupby(["Age"],as_index=False).mean().sort_values(by="satisfaction",ascending=False)

"""Getting the mean value for Food and Drink and satisfaction column"""

df[["Food_and_drink","satisfaction"]].groupby(["Food_and_drink"],as_index=False).mean().sort_values(by="satisfaction",ascending=False)

"""Display a boxplot for flight distances"""

df["Flight_Distance"].plot(kind="box")

"""Display a boxplot for checkin service"""

df["Checkin_service"].plot(kind="box")

"""Fing all the Null values"""

df.isnull().sum()

"""Drop all the null values"""

df=df.dropna()

df.isnull().sum()

"""Finding Unique Flight distance"""

df["Flight_Distance"].unique()

"""## Encoding in columns Gender, Customer_Type, Type_of_Travel, and Class."""

from sklearn.preprocessing import LabelEncoder
enc=LabelEncoder()

df["Gender"]=enc.fit_transform(df["Gender"])
df["Customer_Type"]=enc.fit_transform(df["Customer_Type"])
df["Type_of_Travel"]=enc.fit_transform(df["Type_of_Travel"])
df["Class"]=enc.fit_transform(df["Class"])

df.columns

"""## Dropping Column id"""

df=df.drop("id",axis=1)

df

"""## Creating Feature and Target data"""

x=df.drop("satisfaction",axis=1)
y=df["satisfaction"]

x.shape

y.shape

"""## Scalling the Feature data"""

x

cols=x.columns

from sklearn.preprocessing import StandardScaler
sc=StandardScaler()

x=sc.fit_transform(x)

x

x=pd.DataFrame(x,columns=cols)

x

"""# Splitting Data In training & testing sets"""

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)

x_train.shape

x_test.shape

y_train.shape

y_test.shape

"""## Implementing Decision Tree with various parameters"""

from sklearn.tree import DecisionTreeClassifier
params_dt = {'max_depth': 12,
             'max_features': "sqrt",
            'min_samples_leaf':1,
             'min_samples_split':2,
            'criterion':'gini'}

model_dt = DecisionTreeClassifier(**params_dt)

from sklearn.metrics import accuracy_score,confusion_matrix,classification_report,precision_score,recall_score

"""## Creating a function to display precision score, recall score, accuracy, classification report, confusion matrix, F1 Score"""

def run_model(model_dt, x_train, y_train, x_test, y_test):
    model_dt.fit(x_train,y_train.ravel())
    y_pred = model_dt.predict(x_test)
    accuracy = accuracy_score(y_test, y_pred)
    print("pricison_score: ",precision_score(y_test, y_pred))
    print("recall_score: ",recall_score(y_test, y_pred))
    print("Accuracy = {}".format(accuracy))
    print(classification_report(y_test,y_pred,digits=5))
    print(confusion_matrix(y_test,y_pred))

run_model(model_dt,x_train, y_train, x_test, y_test)

